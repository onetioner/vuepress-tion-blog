(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{539:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"linux-day02"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-day02"}},[t._v("#")]),t._v(" Linux-Day02")]),t._v(" "),s("h2",{attrs:{id:"课程内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课程内容"}},[t._v("#")]),t._v(" 课程内容")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("软件安装")])]),t._v(" "),s("li",[s("p",[t._v("项目部署")])])]),t._v(" "),s("h2",{attrs:{id:"_1-软件安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-软件安装"}},[t._v("#")]),t._v(" 1. 软件安装")]),t._v(" "),s("h3",{attrs:{id:"_1-1-软件安装方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-软件安装方式"}},[t._v("#")]),t._v(" 1.1 软件安装方式")]),t._v(" "),s("p",[t._v("在Linux系统中，安装软件的方式主要有四种，这四种安装方式的特点如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("安装方式")]),t._v(" "),s("th",[t._v("特点")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("二进制发布包安装")]),t._v(" "),s("td",[t._v("软件已经针对具体平台编译打包发布，只要解压，修改配置即可")])]),t._v(" "),s("tr",[s("td",[t._v("rpm安装")]),t._v(" "),s("td",[t._v("软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，==不能自行解决库依赖问题==")])]),t._v(" "),s("tr",[s("td",[t._v("yum安装")]),t._v(" "),s("td",[t._v("一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题(安装过程需要联网)")])]),t._v(" "),s("tr",[s("td",[t._v("源码编译安装")]),t._v(" "),s("td",[t._v("软件以源码工程的形式发布，需要自己编译打包")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-2-安装jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-安装jdk"}},[t._v("#")]),t._v(" 1.2 安装JDK")]),t._v(" "),s("p",[t._v("上述我们介绍了Linux系统软件安装的四种形式，接下来我们就通过第一种(二进制发布包)形式来安装JDK。 JDK对应的二进制发布包，在课程资料中已经提供，如下："),s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814174022881.png",alt:"image-20210814174022881"}})]),t._v(" "),s("p",[t._v("JDK具体安装步骤如下：")]),t._v(" "),s("p",[s("strong",[t._v("1). 上传安装包")])]),t._v(" "),s("p",[t._v("使用FinalShell自带的上传工具将jdk的二进制发布包上传到Linux")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814180303278.png",alt:"image-20210814180303278"}})]),t._v(" "),s("p",[t._v("由于上述在进行文件上传时，选择的上传目录为根目录 /，上传完毕后，我们执行指令 cd / 切换到根目录下，查看上传的安装包。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814180702071.png",alt:"image-20210814180702071"}})]),t._v(" "),s("p",[s("strong",[t._v("2). 解压安装包")])]),t._v(" "),s("p",[t._v("执行如下指令，将上传上来的压缩包进行解压，并通过-C参数指定解压文件存放目录为 /usr/local。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814181014481.png",alt:"image-20210814181014481"}})]),t._v(" "),s("p",[s("strong",[t._v("3). 配置环境变量")])]),t._v(" "),s("p",[t._v("在文件末尾加入如下配置")]),t._v(" "),s("p",[t._v("具体操作指令如下:")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置jdk的环境变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'JAVA_HOME=/usr/local/jdk1.8.0_171'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /etc/profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PATH=$JAVA_HOME/bin:$PATH'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /etc/profile\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("4). 重新加载profile文件")])]),t._v(" "),s("p",[t._v("为了使更改的配置立即生效，需要重新加载profile文件，执行命令:")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" /etc/profile\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("5). 检查安装是否成功")])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-version")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814182327675.png",alt:"image-20210814182327675"}})]),t._v(" "),s("h3",{attrs:{id:"_1-3-安装tomcat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-安装tomcat"}},[t._v("#")]),t._v(" 1.3 安装Tomcat")]),t._v(" "),s("h4",{attrs:{id:"_1-3-1-tomcat安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-tomcat安装"}},[t._v("#")]),t._v(" 1.3.1 Tomcat安装")]),t._v(" "),s("p",[t._v("Tomcat的安装和上述JDK的安装采用相同的方式，都是使用二进制发布包的形式进行安装，在我们的资料目录下，也已经准备了Tomcat的安装包：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814222911649.png",alt:"image-20210814222911649"}})]),t._v(" "),s("p",[t._v("具体安装步骤如下：")]),t._v(" "),s("p",[s("strong",[t._v("1). 上传安装包")])]),t._v(" "),s("p",[t._v("使用FinalShell自带的上传工具将Tomcat的二进制发布包上传到Linux(与前面上传JDK安装包步骤一致)。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814223436296.png",alt:"image-20210814223436296"}})]),t._v(" "),s("p",[s("strong",[t._v("2). 解压安装包")])]),t._v(" "),s("p",[t._v("将上传上来的安装包解压到指定目录/usr/local下，执行命令为")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tar -zxvf apache-tomcat-7.0.57.tar.gz -C /usr/local\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("3). 启动Tomcat")])]),t._v(" "),s("p",[t._v("进入Tomcat的bin目录启动服务。执行命令为:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cd /usr/local/apache-tomcat-7.0.57/\n\ncd bin\n\nsh startup.sh或者./startup.sh\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("img",{staticStyle:{zoom:"85.5%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814223807228.png",alt:"image-20210814223807228"}}),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814223959266.png",alt:"image-20210814223959266"}})]),t._v(" "),s("h4",{attrs:{id:"_1-3-2-tomcat进程查看"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-tomcat进程查看"}},[t._v("#")]),t._v(" 1.3.2 Tomcat进程查看")]),t._v(" "),s("p",[t._v("上述我们将Tomcat启动完成之后，并不能知道Tomcat是否正常运行，那么我们验证Tomcat启动是否成功，有多种方式，我们这里主要介绍常见的两种方式：")]),t._v(" "),s("p",[s("strong",[t._v("1). 查看启动日志")])]),t._v(" "),s("p",[t._v("Tomcat的启动日志输出在Tomcat的安装目录下的logs目录中，Tomcat的启动及运行日志文件名为 catalina.out，所以我们查看Tomcat启动日志，主要可以通过两条指令，如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1). 分页查询Tomcat的日志信息\nmore /usr/local/apache-tomcat-7.0.57/logs/catalina.out\n\n2). 查询日志文件尾部的50行记录\ntail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("只要Tomcat在启动的过程中，日志输出没有报错，基本可以判定Tomcat启动成功了。")]),t._v(" "),s("p",[s("strong",[t._v("2). 查询系统进程")])]),t._v(" "),s("p",[t._v("我们也可以通过Linux系统的查看系统进程的指令，来判定Tomcat进程是否存在，从而判定Tomcat是否启动。执行如下指令：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ps -ef | grep tomcat\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814225635982.png",alt:"image-20210814225635982"}})]),t._v(" "),s("p",[s("strong",[t._v("说明:")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("==ps==命令是linux下非常强大的进程查看命令，通过ps -ef可以查看当前运行的所有进程的详细信息")])]),t._v(" "),s("li",[s("p",[t._v('=="|"== 在Linux中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入')])]),t._v(" "),s("li",[s("p",[t._v("使用ps命令查看进程时，经常配合管道符和查找命令 grep 一起使用，来查看特定进程")])])]),t._v(" "),s("h4",{attrs:{id:"_1-3-3-防火墙操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-防火墙操作"}},[t._v("#")]),t._v(" 1.3.3 防火墙操作")]),t._v(" "),s("p",[t._v("前面我们已经通过日志的方式及查看系统进程的方式，验证了Tomcat服务已经正常启动，接下来我们就可以尝试访问一下。访问地址：http://192.168.138.130:8080，我们发现是访问不到的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814230753600.png",alt:"image-20210814230753600"}})]),t._v(" "),s("p",[t._v("那为什么tomcat启动成功了，但就是访问不到呢？原因就在于Linux系统的防火墙，系统安装完毕后，系统启动时，防火墙自动启动，防火墙拦截了所有端口的访问。接下来我们就需要学习一下，如何操作防火墙，具体指令如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("操作")]),t._v(" "),s("th",[t._v("指令")]),t._v(" "),s("th",[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("查看防火墙状态")]),t._v(" "),s("td",[t._v("systemctl status firewalld / firewall-cmd --state")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("暂时关闭防火墙")]),t._v(" "),s("td",[t._v("systemctl stop firewalld")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("永久关闭防火墙(禁用开机自启)")]),t._v(" "),s("td",[t._v("systemctl disable firewalld")]),t._v(" "),s("td",[t._v("==下次启动,才生效==")])]),t._v(" "),s("tr",[s("td",[t._v("暂时开启防火墙")]),t._v(" "),s("td",[t._v("systemctl start firewalld")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("永久开启防火墙(启用开机自启)")]),t._v(" "),s("td",[t._v("systemctl enable firewalld")]),t._v(" "),s("td",[t._v("==下次启动,才生效==")])]),t._v(" "),s("tr",[s("td",[t._v("开放指定端口")]),t._v(" "),s("td",[t._v("firewall-cmd --zone=public --add-port=8080/tcp --permanent")]),t._v(" "),s("td",[t._v("==需要重新加载生效==")])]),t._v(" "),s("tr",[s("td",[t._v("关闭指定端口")]),t._v(" "),s("td",[t._v("firewall-cmd --zone=public --remove-port=8080/tcp --permanent")]),t._v(" "),s("td",[t._v("==需要重新加载生效==")])]),t._v(" "),s("tr",[s("td",[t._v("立即生效(重新加载)")]),t._v(" "),s("td",[t._v("firewall-cmd --reload")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("查看开放端口")]),t._v(" "),s("td",[t._v("firewall-cmd --zone=public --list-ports")]),t._v(" "),s("td")])])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("​\tA. systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作")]),t._v(" "),s("p",[t._v("​\tB. firewall-cmd是Linux中专门用于控制防火墙的命令")]),t._v(" "),s("p",[t._v("​\tC. 为了保证系统安全，服务器的防火墙不建议关闭")])]),t._v(" "),s("p",[t._v("那么我们要想访问到Tomcat，就可以采取两种类型的操作：")]),t._v(" "),s("p",[s("strong",[t._v("A. 关闭防火墙")])]),t._v(" "),s("p",[t._v("执行指令 :")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#停止防火墙")]),t._v("\nsystemctl stop firewalld\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#禁用防火墙开机启动")]),t._v("\nsystemctl disable firewalld\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("关闭之后，再次访问Tomcat，就可以访问到了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814232643393.png",alt:"image-20210814232643393"}})]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("注意: 上面我们也提到了，直接关闭系统的防火墙，是不建议的，因为这样会造成系统不安全。")])],1),t._v(" "),s("p",[s("strong",[t._v("B. 开放Tomcat的端口号8080")])]),t._v(" "),s("p",[t._v("执行指令:")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("①. 先开启系统防火墙\nsystemctl start firewalld\n\n②. 再开放8080端口号\nfirewall-cmd "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--zone")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("public --add-port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--permanent")]),t._v("\n\n③. 重新加载防火墙\nfirewall-cmd "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--reload")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("执行上述的操作之后，就开放了当前系统中的8080端口号，再次访问Tomcat。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814232643393.png",alt:"image-20210814232643393"}})]),t._v(" "),s("h4",{attrs:{id:"_1-3-4-停止tomcat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-4-停止tomcat"}},[t._v("#")]),t._v(" 1.3.4 停止Tomcat")]),t._v(" "),s("p",[t._v("在Linux系统中，停止Tomcat服务的方式主要有两种：")]),t._v(" "),s("p",[s("strong",[t._v("1). 运行Tomcat提供的脚本文件")])]),t._v(" "),s("p",[t._v("在Tomcat安装目录下有一个bin目录，这个目录中存放的是tomcat的运行脚本文件，其中有一个脚本就是用于停止tomcat服务的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814235615330.png",alt:"image-20210814235615330"}})]),t._v(" "),s("p",[t._v("我们可以切换到bin目录，并执行如下指令，来停止Tomcat服务：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sh shutdown.sh\n./shutdown.sh\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("2). 结束Tomcat进程")])]),t._v(" "),s("p",[t._v("我们可以先通过 "),s("code",[t._v("ps -ef | grep tomcat")]),t._v(" 指令查看tomcat进程的信息，从进程信息中获取tomcat服务的进程号。然后通过kill -9 的形式，来杀死系统进程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210814235926088.png",alt:"image-20210814235926088"}})]),t._v(" "),s("p",[t._v("通过上述的指令，我们可以获取到tomcat的进程号为 79947。接下来，我们就可以通过指令 ，来杀死tomcat的进程 ：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("kill -9 79947 \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("执行完上述指令之后，我们再访问Linux系统中的Tomcat，就访问不到了。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("​\tkill命令是Linux提供的用于结束进程的命令，-9表示强制结束")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意 ：")]),t._v(" "),s("p",[t._v("​\t虽然上述讲解的两种方式，都可以停止Tomcat服务，但是推荐使用第一种方式(./shutdown.sh)执行脚本来关闭tomcat服务，如果通过第一种方式停止不了tomcat了，这个时候，我们可以考虑使用第二种方式，强制杀死进程。")])]),t._v(" "),s("h3",{attrs:{id:"_1-4-安装mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-安装mysql"}},[t._v("#")]),t._v(" 1.4 安装MySQL")]),t._v(" "),s("h4",{attrs:{id:"_1-4-1-mysql安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-mysql安装"}},[t._v("#")]),t._v(" 1.4.1 MySQL安装")]),t._v(" "),s("p",[t._v("对于MySQL数据库的安装，我们将要使用前面讲解的第二种安装方式rpm进行安装。那么首先我们先了解一下什么rpm？")]),t._v(" "),s("blockquote",[s("p",[t._v("**RPM：**全称为 Red-Hat Package Manager，RPM软件包管理器，是红帽Linux用于管理和安装软件的工具。")])]),t._v(" "),s("p",[t._v("我们要通过rpm，进行MySQL数据库的安装，主要的步骤如下：")]),t._v(" "),s("p",[s("strong",[t._v("1). 检测当前系统是否安装过MySQL相关数据库")])]),t._v(" "),s("p",[t._v("需要通过rpm相关指令，来查询当前系统中是否存在已安装的mysql软件包，执行指令如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("rpm -qa\t\t\t\t\t\t\t#查询当前系统中安装的所有软件\nrpm -qa | grep mysql\t\t\t#查询当前系统中安装的名称带mysql的软件\nrpm -qa | grep mariadb\t\t\t#查询当前系统中安装的名称带mariadb的软件\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("通过rpm -qa 查询到系统通过rpm安装的所有软件，太多了，不方便查看，所以我们可以通过管道符 | 配合着grep进行过滤查询。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815002209121.png",alt:"image-20210815002209121"}})]),t._v(" "),s("p",[t._v("通过查询，我们发现在当前系统中存在mariadb数据库，是CentOS7中自带的，而这个数据库和MySQL数据库是冲突的，所以要想保证MySQL成功安装，需要卸载mariadb数据库。")]),t._v(" "),s("p",[s("strong",[t._v("2). 卸载现有的MySQL数据库")])]),t._v(" "),s("p",[t._v("在rpm中，卸载软件的语法为：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("rpm -e --nodeps  软件名称\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("那么，我们就可以通过指令，卸载 mariadb，具体指令为：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("rpm -e --nodeps  mariadb-libs-5.5.60-1.el7_5.x86_64\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815002649784.png",alt:"image-20210815002649784"}})]),t._v(" "),s("p",[t._v("我们看到执行完毕之后， 再次查询 mariadb，就查不到了，因为已经被成功卸载了。")]),t._v(" "),s("p",[s("strong",[t._v("3). 将资料中提供的MySQL安装包上传到Linux并解压")])]),t._v(" "),s("p",[t._v("A. 上传MySQL安装包")]),t._v(" "),s("p",[t._v("在课程资料中，提供的有MySQL的安装包 ，我们需要将该安装包上传到Linux系统的根目录 / 下面。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815002907050.png",alt:"image-20210815002907050"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815003107734.png",alt:"image-20210815003107734"}})]),t._v(" "),s("p",[t._v("B. 解压到/usr/local/mysql")]),t._v(" "),s("p",[t._v("执行如下指令:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("mkdir /usr/local/mysql\ntar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815003647507.png",alt:"image-20210815003647507"}})]),t._v(" "),s("p",[s("strong",[t._v("4). 安装顺序安装rpm安装包")])]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-y")]),t._v(" net-tools perl libaio openssl gcc pcre-devel zlib-devel openssl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" openssl-devel\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/mysql/\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ivh")]),t._v(" mysql-community-common-5.7.25-1.el7.x86_64.rpm\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ivh")]),t._v(" mysql-community-libs-5.7.25-1.el7.x86_64.rpm\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ivh")]),t._v(" mysql-community-devel-5.7.25-1.el7.x86_64.rpm\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ivh")]),t._v(" mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ivh")]),t._v(" mysql-community-client-5.7.25-1.el7.x86_64.rpm\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ivh")]),t._v(" mysql-community-server-5.7.25-1.el7.x86_64.rpm\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("blockquote",[s("p",[t._v("说明:")]),t._v(" "),s("ul",[s("li",[t._v("因为rpm安装方式，是不会自动处理依赖关系的，需要我们自己处理，所以对于上面的rpm包的安装顺序不能随意修改。")]),t._v(" "),s("li",[t._v("安装过程中提示缺少net-tools依赖，使用yum安装(yum是一种在线安装方式，需要保证联网)")]),t._v(" "),s("li",[t._v("可以通过指令(yum update)升级现有软件及系统内核")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815004608198.png",alt:"image-20210815004608198"}})]),t._v(" "),s("h4",{attrs:{id:"_1-4-2-mysql启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-mysql启动"}},[t._v("#")]),t._v(" 1.4.2 MySQL启动")]),t._v(" "),s("p",[t._v("MySQL安装完成之后，会自动注册为系统的服务，服务名为mysqld。那么，我们就可以通过systemctl指令来查看mysql的状态、启动mysql、停止mysql。")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("systemctl start mysqld\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#启动mysql服务")]),t._v("\nsystemctl status mysqld\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看mysql服务状态")]),t._v("\nsystemctl stop mysqld\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#停止mysql服务")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815005920721.png",alt:"image-20210815005920721"}})]),t._v(" "),s("blockquote",[s("p",[t._v("说明：")]),t._v(" "),s("p",[t._v("​\t可以设置开机时启动mysql服务，避免每次开机启动mysql。执行如下指令：")]),t._v(" "),s("p",[t._v("​\tsystemctl enable mysqld")])]),t._v(" "),s("p",[t._v("我们可以通过如下两种方式，来判定mysql是否启动：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-tunlp")]),t._v("\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看已经启动的服务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-tunlp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" mysql\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看mysql的服务信息")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" –ef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" mysql\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看mysql进程")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815010410996.png",alt:"image-20210815010410996"}})]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{color:"red"}},[t._v("备注: ")])],1),t._v(" "),s("p",[t._v("​\t"),s("font",{attrs:{color:"red"}},[t._v("A. netstat命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。")])],1),t._v(" "),s("p",[t._v("​\t\t参数说明:")]),t._v(" "),s("p",[t._v("​\t\t-l或--listening：显示监控中的服务器的Socket；\n​\t\t-n或--numeric：直接使用ip地址，而不通过域名服务器；\n​\t\t-p或--programs：显示正在使用Socket的程序识别码和程序名称；\n​\t\t-t或--tcp：显示TCP传输协议的连线状况；\n​\t\t-u或--udp：显示UDP传输协议的连线状况；")]),t._v(" "),s("p",[t._v("​\t"),s("font",{attrs:{color:"red"}},[t._v("B. ps命令用于查看Linux中的进程数据。")])],1)]),t._v(" "),s("h4",{attrs:{id:"_1-4-3-mysql登录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-mysql登录"}},[t._v("#")]),t._v(" 1.4.3 MySQL登录")]),t._v(" "),s("h5",{attrs:{id:"_1-4-3-1-查阅临时密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-1-查阅临时密码"}},[t._v("#")]),t._v(" 1.4.3.1 查阅临时密码")]),t._v(" "),s("p",[t._v("MySQL启动起来之后，我们就可以测试一下登录操作，但是我们要想登录MySQL，需要一个访问密码，而刚才在安装MySQL的过程中，并没有看到让我们设置访问密码，那这个访问密码是多少呢? 那实际上，对于rpm安装的mysql，在mysql第一次启动时，会自动帮我们生成root用户的访问密码，并且输出在mysql的日志文件 /var/log/mysqld.log中，我们可以查看这份日志文件，从而获取到访问密码。")]),t._v(" "),s("p",[t._v("可以执行如下指令：")]),t._v(" "),s("p",[t._v("1). cat /var/log/mysqld.log")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815011744113.png",alt:"image-20210815011744113"}})]),t._v(" "),s("p",[t._v("这种方式，可以看到所有的日志数据，文件比较大时，很不方便查看数据。我们可以通过管道符 | 配合grep来对数据进行过滤。")]),t._v(" "),s("p",[t._v("2). cat /var/log/mysqld.log | grep password")]),t._v(" "),s("p",[t._v("我们可以通过上述指令，查询日志文件内容中包含password的行信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815011938287.png",alt:"image-20210815011938287"}})]),t._v(" "),s("h5",{attrs:{id:"_1-4-3-2-登录mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-2-登录mysql"}},[t._v("#")]),t._v(" 1.4.3.2 登录MySQL")]),t._v(" "),s("p",[t._v("获取到root用户的临时密码之后，我们就可以登录mysql数据库，修改root的密码，为root设置一个新的密码。并且我们还需要开启root用户远程访问该数据库的权限，这样的话，我们就可以在windows上来访问这台MySQL数据库。")]),t._v(" "),s("p",[t._v("登录mysql（复制日志中的临时密码登录）：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("mysql "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-uroot")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v("\t\t\t\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" global "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("validate_password_length")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置密码长度最低位数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" global "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("validate_password_policy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置密码安全等级低，便于密码修改成root")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置密码为root")]),t._v("\n\ngrant all on *.* to "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),t._v("@"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%'")]),t._v(" identified by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#开启访问权限")]),t._v("\nflush privileges"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("操作完上述的指令之后，数据库root用户的密码以及远程访问我们就配置好了，接下来，可以执行exit退出mysql，再次通过新的密码进行登录。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815012902871.png",alt:"image-20210815012902871"}})]),t._v(" "),s("p",[t._v("当然我们也可以使用安装在windows系统中的sqlyog或者Navicat来远程连接linux上的MySQL。")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815013909486.png",alt:"image-20210815013909486"}}),t._v(" "),s("p",[t._v("==注意： 要想在windows上能够访问MySQL，还需要关闭防火墙，执行如下指令：==")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#停止防火墙")]),t._v("\nsystemctl stop firewalld\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#禁用防火墙开机启动")]),t._v("\nsystemctl disable firewalld\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h5",{attrs:{id:"_1-4-3-3-修改默认编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-3-修改默认编码"}},[t._v("#")]),t._v(" 1.4.3.3 修改默认编码")]),t._v(" "),s("p",[t._v("mysql默认编码为"),s("code",[t._v("latin1")]),t._v("，进入mysql可以查询到。"),s("code",[t._v('show global variables like "%char%";')])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20220215191106570.png",alt:"image-20220215191106570"}})]),t._v(" "),s("p",[t._v("我们需要将mysql的默认编码修改为utf8，编辑 /etc/my.cnf文件")]),t._v(" "),s("p",[s("code",[t._v("/etc/my.cnf")]),t._v(" 完整配置文件如下：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# For advice on how to change settings please see")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("default_character_set")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("default_character_set")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mysqld"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("character_set_server")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Remove leading # and set to the amount of RAM for the most important data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# innodb_buffer_pool_size = 128M")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Remove leading # to turn on a very important data integrity option: logging")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# changes to the binary log between backups.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log_bin")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Remove leading # to set options mainly useful for reporting servers.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The server defaults are faster for transactions and fast SELECTs.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adjust sizes as needed, experiment to find the optimal values.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# join_buffer_size = 128M")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sort_buffer_size = 2M")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read_rnd_buffer_size = 2M")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("datadir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/var/lib/mysql\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("socket")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/var/lib/mysql/mysql.sock\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Disabling symbolic-links is recommended to prevent assorted security risks")]),t._v("\nsymbolic-links"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\nlog-error"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/var/log/mysqld.log\npid-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/var/run/mysqld/mysqld.pid\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br")])]),s("h2",{attrs:{id:"_2-项目部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-项目部署"}},[t._v("#")]),t._v(" 2. 项目部署")]),t._v(" "),s("p",[t._v("之前我们讲解Linux操作系统时，就提到，我们服务端开发工程师学习Linux系统的目的就是将来我们开发的项目绝大部分情况下都需要部署在Linux系统中。那么在本章节，我们将通过两种方式，来演示项目部署，分别是：手动部署项目 和 基于shell脚本自动部署。")]),t._v(" "),s("h3",{attrs:{id:"_2-1-手动部署项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-手动部署项目"}},[t._v("#")]),t._v(" 2.1 手动部署项目")]),t._v(" "),s("p",[s("strong",[t._v("1). 在IDEA中开发SpringBoot项目并打成jar包")])]),t._v(" "),s("p",[t._v("项目是一个很简单的 "),s("code",[t._v("springboot")]),t._v(" 项目(==可以直接导入资料中提供的==)，结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815102934678.png",alt:"image-20210815102934678"}})]),t._v(" "),s("p",[t._v("可以在本地的idea中先启动当前的demo工程，然后访问一下，看看工程是否正常访问。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815103130325.png",alt:"image-20210815103130325"}})]),t._v(" "),s("p",[t._v("执行package指令，进行打包操作，将当前的springboot项目，打成一个jar包。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815103344378.png",alt:"image-20210815103344378"}})]),t._v(" "),s("p",[s("strong",[t._v("2). 将jar包上传到Linux服务器")])]),t._v(" "),s("p",[t._v("将打好的jar包上传至Linux服务器的 /usr/local/app 目录下。 先执行指令创建app目录。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("A. 在/usr/local下创建目录app\nmkdir /usr/local/app\n\nB. 切换到app目录下\ncd /usr/local/app\n\nC. 执行指令,进行jar包上传\nrz\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815131101930.png",alt:"image-20210815131101930"}})]),t._v(" "),s("p",[t._v("此时这个jar包就上传到 /usr/local/app 目录了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815131234243.png",alt:"image-20210815131234243"}})]),t._v(" "),s("p",[s("strong",[t._v("3). 启动SpringBoot程序")])]),t._v(" "),s("p",[t._v("由于我们的项目已经打成jar包上传上来到Linux服务器，我们只需要运行这个jar包项目就启动起来了，所以只需要执行如下指令即可：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-jar")]),t._v(" helloworld-1.0-SNAPSHOT.jar\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815131812582.png",alt:"image-20210815131812582"}})]),t._v(" "),s("p",[t._v("==注意： 由于前面安装的Tomcat在启动时，会占用端口号8080，而当前springboot项目我们没有配置端口号，默认也是8080，所以我们要想启动springboot项目，需要把之前运行的Tomcat停止掉。==")]),t._v(" "),s("p",[s("strong",[t._v("4). 检查防火墙，确保8080端口对外开放，访问SpringBoot项目")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("firewall-cmd --zone=public --list-ports\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815132430385.png",alt:"image-20210815132430385"}})]),t._v(" "),s("p",[t._v("如果防火墙没有放开8080端口，还需要放开对应的端口号，执行如下指令：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("firewall-cmd --zone=public --add-port=8080/tcp --permanent\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("5). 访问测试")])]),t._v(" "),s("p",[t._v("http://192.168.138.130:8080/hello")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815132748655.png",alt:"image-20210815132748655"}})]),t._v(" "),s("p",[s("strong",[t._v("6). 后台运行项目")])]),t._v(" "),s("p",[t._v("当前这个demo工程我们已经部署成功了，并且我们也可以访问项目了。但是这个工程目前是存在问题的，就是当前我们项目启动的这个窗口被霸屏占用了，如果我们把这个窗口关闭掉(或ctrl+c)，当前服务也就访问不到了，我们可以试一下。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815133510405.png",alt:"image-20210815133510405"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815133719642.png",alt:"image-20210815133719642"}})]),t._v(" "),s("p",[s("strong",[t._v("目前程序运行的问题：")])]),t._v(" "),s("p",[t._v("A. 线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行")]),t._v(" "),s("p",[t._v("B. 线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息")]),t._v(" "),s("p",[s("strong",[t._v("后台运行程序:")])]),t._v(" "),s("p",[t._v("要想让我们部署的项目进行后台运行，这个时候我们需要使用到linux中的一个命令 nohup ，接下来，就来介绍一下nohup命令。")]),t._v(" "),s("blockquote",[s("p",[t._v("**nohup命令：**英文全称 no hang up（不挂起），用于不挂断地运行指定命令，退出终端不会影响程序的运行")]),t._v(" "),s("p",[s("strong",[t._v("语法格式：")]),t._v(" nohup Command [ Arg … ] [&]")]),t._v(" "),s("p",[s("strong",[t._v("参数说明：")])]),t._v(" "),s("p",[t._v("​\tCommand：要执行的命令")]),t._v(" "),s("p",[t._v("​\tArg：一些参数，可以指定输出文件")]),t._v(" "),s("p",[t._v("​\t&：让命令在后台运行")]),t._v(" "),s("p",[s("strong",[t._v("举例：")])]),t._v(" "),s("p",[t._v("​\tnohup java -jar boot工程.jar &> hello.log &")]),t._v(" "),s("p",[t._v("​\t上述指令的含义为： 后台运行 java -jar 命令，并将日志输出到hello.log文件")])]),t._v(" "),s("p",[t._v("那么经过上面的介绍，我们可以推测中，我们要想让当前部署的项目后台运行，就可以使用下面的指令：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nohup")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-jar")]),t._v(" helloworld-1.0-SNAPSHOT.jar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&>")]),t._v(" hello.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815140847083.png",alt:"image-20210815140847083"}})]),t._v(" "),s("p",[t._v("这样的话，我们的项目就已经启动成功了，我们可以通过ps指令，查看到系统的进程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815140944635.png",alt:"image-20210815140944635"}})]),t._v(" "),s("p",[t._v("接下来，我们再次访问我们的项目，来看看服务是否可用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815132748655.png",alt:"image-20210815132748655"}})]),t._v(" "),s("p",[s("strong",[t._v("7). 停止SpringBoot项目")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815142132135.png",alt:"image-20210815142132135"}})]),t._v(" "),s("h3",{attrs:{id:"_2-2-基于shell脚本自动部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-基于shell脚本自动部署"}},[t._v("#")]),t._v(" 2.2 基于Shell脚本自动部署")]),t._v(" "),s("h4",{attrs:{id:"_2-2-1-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-介绍"}},[t._v("#")]),t._v(" 2.2.1 介绍")]),t._v(" "),s("p",[t._v("前面介绍的项目部署是手动部署，也就是部署过程中的每一步操作都需要我们手动操作。接下来，我们需要再讲解一下项目的自动部署，从而来简化项目部署的操作，那么我们先来整体上了解一下项目自动部署的流程及操作步骤。")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815143955229.png",alt:"image-20210815143955229"}}),t._v(" "),s("p",[t._v("操作步骤如下：")]),t._v(" "),s("p",[t._v("1). 在Gitee上创建远程仓库，并将本地的项目代码推送到远程仓库中")]),t._v(" "),s("p",[t._v("2). 在Linux中安装Git,克隆代码")]),t._v(" "),s("p",[t._v("3). 在Linux中安装maven")]),t._v(" "),s("p",[t._v("4). 编写Shell脚本（拉取代码、编译、打包、启动）")]),t._v(" "),s("p",[t._v("5). 为用户授予执行Shell脚本的权限")]),t._v(" "),s("p",[t._v("6). 执行Shell脚本")]),t._v(" "),s("h4",{attrs:{id:"_2-2-2-推送代码到远程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-推送代码到远程"}},[t._v("#")]),t._v(" 2.2.2 推送代码到远程")]),t._v(" "),s("p",[t._v("这部分操作，大家只需要参考之前讲解的Git，来完成helloworld工程代码推送即可。")]),t._v(" "),s("p",[t._v("A. 创建远程仓库")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815145550077.png",alt:"image-20210815145550077"}}),t._v(" "),s("p",[t._v("B. 将idea中的代码提交并推送到远程仓库")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815145253347.png",alt:"image-20210815145253347"}})]),t._v(" "),s("img",{staticStyle:{zoom:"78%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815145432883.png",alt:"image-20210815145432883"}}),t._v(" "),s("h4",{attrs:{id:"_2-2-3-git操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-git操作"}},[t._v("#")]),t._v(" 2.2.3 Git操作")]),t._v(" "),s("p",[t._v("1). Git软件安装")]),t._v(" "),s("p",[t._v("通过yum命令在线安装git，执行如下指令：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("yum list "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\t\t\t列出git安装包\nyum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-y")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\t\t\t在线安装git\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("通过上述指令，安装好git之后，我们就可以通过 git --version去验证git的环境。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815145934265.png",alt:"image-20210815145934265"}})]),t._v(" "),s("p",[t._v("2). Git克隆代码（克隆自己的helloworld仓库地址）")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://gitee.com/ChuanZhiBoKe/helloworld.git\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815150452988.png",alt:"image-20210815150452988"}})]),t._v(" "),s("h4",{attrs:{id:"_2-2-4-maven安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-maven安装"}},[t._v("#")]),t._v(" 2.2.4 Maven安装")]),t._v(" "),s("p",[t._v("由于我们的工程是maven工程，我们要想进行项目的编译打包，需要用到maven的指令，所以需要安装maven。具体操作步骤如下：")]),t._v(" "),s("p",[s("strong",[t._v("1). 上传资料中提供的maven的安装包")])]),t._v(" "),s("p",[t._v("通过rz指令上传课程资料中的maven安装包")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815151544489.png",alt:"image-20210815151544489"}})]),t._v(" "),s("img",{staticStyle:{zoom:"90%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815151807043.png",alt:"image-20210815151807043"}}),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815151901262.png",alt:"image-20210815151901262"}})]),t._v(" "),s("p",[s("strong",[t._v("2). 解压maven安装包到/usr/local目录")])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-zxvf")]),t._v(" apache-maven-3.5.4-bin.tar.gz "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-C")]),t._v(" /usr/local\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815152033246.png",alt:"image-20210815152033246"}})]),t._v(" "),s("p",[s("strong",[t._v("3). 在/etc/profile配置文件中配置环境变量")])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /etc/profile\n\n修改配置文件，进入到命令模式，按G切换到最后一行，按a/i/o进入插入模式，然后在最后加入如下内容 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MAVEN_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/apache-maven-3.5.4\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/bin:"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MAVEN_HOME")]),t._v("/bin:"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("\n\n然后按ESC进入到命令模式，输入 :wq 保存并退出\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815152321369.png",alt:"image-20210815152321369"}})]),t._v(" "),s("p",[t._v("要想让配置的环境变量生效,还需要执行如下指令:")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" /etc/profile\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815152616703.png",alt:"image-20210815152616703"}})]),t._v(" "),s("p",[s("strong",[t._v("4). 修改maven的settings.xml配置文件,配置本地仓库地址")])]),t._v(" "),s("p",[t._v("A. 切换目录")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/apache-maven-3.5.4/conf\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("B. 编辑settings.xml配置文件")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vim settings.xml\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在其中增加如下配置,配置本地仓库地址:")]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("localRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/usr/local/repo"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("localRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815152936129.png",alt:"image-20210815152936129"}})]),t._v(" "),s("p",[t._v("并在settings.xml中的<mirrors>标签中,配置阿里云的私服(==选做==):")]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("mirror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("alimaven"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("mirrorOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("central"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("mirrorOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("aliyun maven"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("http://maven.aliyun.com/nexus/content/groups/public/"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("mirror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n这个镜像可以用\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815170915170.png",alt:"image-20210815170915170"}})]),t._v(" "),s("h4",{attrs:{id:"_2-2-5-shell脚本准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-shell脚本准备"}},[t._v("#")]),t._v(" 2.2.5 Shell脚本准备")]),t._v(" "),s("blockquote",[s("p",[t._v("Shell脚本（shell script），是一种Linux系统中的脚本程序。使用Shell脚本编程跟 JavaScript、Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。")]),t._v(" "),s("p",[t._v("对于Shell脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件bootStart.sh即可。")])]),t._v(" "),s("p",[t._v("在/usr/local/目录下创建一个目录 sh(mkdir sh)，并将shell脚本上传到该目录下。或者直接在sh目录下创建一个脚本bootStart.sh，然后将资料中的bootStart.sh文件打开,内容拷贝过来即可。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815153759071.png",alt:"image-20210815153759071"}})]),t._v(" "),s("p",[s("strong",[t._v("脚本解读:")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815154943654.png",alt:"image-20210815154943654"}})]),t._v(" "),s("h4",{attrs:{id:"_2-2-6-linux权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-linux权限"}},[t._v("#")]),t._v(" 2.2.6 Linux权限")]),t._v(" "),s("p",[t._v("前面我们已经把Shell脚本准备好了，但是Shell脚本要想正常的执行，还需要给Shell脚本分配执行权限。 由于linux系统是一个多用户的操作系统，并且针对每一个用户，Linux会严格的控制操作权限。接下来，我们就需要介绍一下Linux系统的权限控制。")]),t._v(" "),s("blockquote",[s("p",[t._v("1). ==chmod==（英文全拼：change mode）命令是控制用户对文件的权限的命令")]),t._v(" "),s("p",[t._v("2). Linux中的权限分为三种 ：读(r)、写(w)、执行(x)")]),t._v(" "),s("p",[t._v("3). Linux文件权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）")]),t._v(" "),s("p",[t._v("4). 只有文件的所有者和超级用户可以修改文件或目录的权限")]),t._v(" "),s("p",[t._v("5). 要执行Shell脚本需要有对此脚本文件的执行权限(x)，如果没有则不能执行")])]),t._v(" "),s("p",[t._v("Linux系统中权限描述如下:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815162945754.png",alt:"image-20210815162945754"}})]),t._v(" "),s("p",[t._v("解析当前脚本的权限情况:")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815162135509.png",alt:"image-20210815162135509"}}),t._v(" "),s("p",[t._v("chmod命令可以使用八进制数来指定权限(0 - 代表无 , 1 - 执行x , 2 - 写w , 4 - 读r):")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("值")]),t._v(" "),s("th",[t._v("权限")]),t._v(" "),s("th",[t._v("rwx")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("7")]),t._v(" "),s("td",[t._v("读 + 写 + 执行")]),t._v(" "),s("td",[t._v("rwx")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[t._v("读 + 写")]),t._v(" "),s("td",[t._v("rw-")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("读 + 执行")]),t._v(" "),s("td",[t._v("r-x")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("只读")]),t._v(" "),s("td",[t._v("r--")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("写 + 执行")]),t._v(" "),s("td",[t._v("-wx")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("只写")]),t._v(" "),s("td",[t._v("-w-")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("只执行")]),t._v(" "),s("td",[t._v("--x")])]),t._v(" "),s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",[t._v("无")]),t._v(" "),s("td",[t._v("---")])])])]),t._v(" "),s("p",[s("strong",[t._v("举例:")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("chmod 777 bootStart.sh   为所有用户授予读、写、执行权限\nchmod 755 bootStart.sh   为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限\nchmod 210 bootStart.sh   为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("==注意:==")]),t._v(" "),s("p",[t._v("三个数字分别代表不同用户的权限")]),t._v(" "),s("ul",[s("li",[t._v("第1位表示文件拥有者的权限")]),t._v(" "),s("li",[t._v("第2位表示同组用户的权限")]),t._v(" "),s("li",[t._v("第3位表示其他用户的权限")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-7-授权并执行脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-7-授权并执行脚本"}},[t._v("#")]),t._v(" 2.2.7 授权并执行脚本")]),t._v(" "),s("p",[t._v("在测试阶段，我们可以给所有的人都赋予执行该shell脚本的权限。所以可以执行如下指令：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),t._v(" bootStart.sh\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815163957647.png",alt:"image-20210815163957647"}})]),t._v(" "),s("p",[t._v("权限解读:")]),t._v(" "),s("p",[t._v("A. 第一个7，代表当前文件所有者root用户，对该文件具有读写执行权限；")]),t._v(" "),s("p",[t._v("B. 第二个7，代表当前文件所有者所属组的用户，对该文件具有读写执行权限；")]),t._v(" "),s("p",[t._v("B. 第三个7，代表其他用户，对该文件具有读写执行权限；")]),t._v(" "),s("p",[t._v("执行该shell脚本:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815170334935.png",alt:"image-20210815170334935"}})]),t._v(" "),s("p",[t._v("==注意： 在执行maven指令进行打包时，第一次执行可能会耗时比较长，因为在进行maven工程的打包时，需要到中央仓库下载工程依赖的jar包和插件(可以在settings.xml中配置阿里云私服加速下载)。==")]),t._v(" "),s("p",[t._v("启动完成之后, 我们可以查看java进程：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815170418707.png",alt:"image-20210815170418707"}})]),t._v(" "),s("p",[t._v("访问项目：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815132748655.png",alt:"image-20210815132748655"}})]),t._v(" "),s("h4",{attrs:{id:"_2-2-8-设置静态ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-8-设置静态ip"}},[t._v("#")]),t._v(" 2.2.8 设置静态IP")]),t._v(" "),s("p",[t._v("我们目前安装的Linux操作系统，安装完毕之后并没有配置IP地址，默认IP地址是动态获取的，那如果我们使用该Linux服务器部署项目，IP动态获取的话，也就意味着，IP地址可能会发生变动，那我们访问项目的话就会非常繁琐，所以作为服务器，我们一般还需要把IP地址设置为静态的。")]),t._v(" "),s("p",[t._v("1). 设置静态IP")]),t._v(" "),s("p",[t._v("设置静态ip，我们就需要修改 /etc/sysconfig/network-scripts/ifcfg-ens33 配置文件，内容如下：")]),t._v(" "),s("div",{staticClass:"language-properties line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("BOOTPROTO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("static")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("IPADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"192.168.138.100"        # 设置的静态IP地址')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("NETMASK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"255.255.255.0"         # 子网掩码')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("GATEWAY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"192.168.138.2"         # 网关地址')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("DNS1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"192.168.138.2"            # DNS服务器')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815171934667.png",alt:"image-20210815171934667"}})]),t._v(" "),s("p",[t._v("上述我们所设置的网段为138，并不是随意指定的，需要和我们虚拟机中的虚拟网络编辑器中的NAT模式配置的网关保持一致。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815172303896.png",alt:"image-20210815172303896"}})]),t._v(" "),s("p",[t._v("2). 重启网络服务")]),t._v(" "),s("p",[t._v("ip地址修改完毕之后，需要重启网络服务，执行如下指令：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("systemctl stop NetworkManager\nsystemctl disable NetworkManager\nsystemctl restart network\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815172448448.png",alt:"image-20210815172448448"}})]),t._v(" "),s("p",[t._v("==注意：重启完网络服务后ip地址已经发生了改变，此时FinalShell已经连接不上Linux系统，需要创建一个新连接才能连接到Linux。==")]),t._v(" "),s("p",[t._v("再次连接上Linux之后，我们再次查看IP地址，就可以看到我们所设置的静态IP：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/onetioner/img/main/PicGo/image-20210815172832108.png",alt:"image-20210815172832108"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);